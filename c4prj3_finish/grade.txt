Grading at Mon Aug 10 17:07:32 UTC 2020
Running 'make clean' to do a clean build of your project
rm -rf *.o poker *~
Running 'make poker OTHERFLAGS=-O3' to build your project
gcc -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3 -c cards.c
gcc -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3 -c deck.c
gcc -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3 -c eval.c
gcc -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3 -c future.c
gcc -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3 -c input.c
gcc -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3 -c main.c
gcc -o poker -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3 cards.o deck.o eval.o future.o input.o main.o
 - Starting with some Texas Hold'em hands
Running a simulation with 20000 draws for 2 hands...
Valgrind reported errors:
==327== Memcheck, a memory error detector
==327== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==327== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==327== Command: ./poker inp.txt 20000
==327== Parent PID: 326
==327== 
==327== Invalid write of size 8
==327==    at 0x40149C: make_deck_exclude (deck.c:108)
==327==    by 0x401616: build_remaining_deck (deck.c:156)
==327==    by 0x400A6C: main (main.c:59)
==327==  Address 0x5208090 is 0 bytes after a block of size 304 alloc'd
==327==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==327==    by 0x4013C2: make_deck_exclude (deck.c:99)
==327==    by 0x401616: build_remaining_deck (deck.c:156)
==327==    by 0x400A6C: main (main.c:59)
==327== 
==327== Invalid write of size 8
==327==    at 0x4014B7: make_deck_exclude (deck.c:110)
==327==    by 0x401616: build_remaining_deck (deck.c:156)
==327==    by 0x400A6C: main (main.c:59)
==327==  Address 0x5208250 is 0 bytes after a block of size 304 alloc'd
==327==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==327==    by 0x4013E3: make_deck_exclude (deck.c:102)
==327==    by 0x401616: build_remaining_deck (deck.c:156)
==327==    by 0x400A6C: main (main.c:59)
==327== 

valgrind: m_mallocfree.c:303 (get_bszB_as_is): Assertion 'bszB_lo == bszB_hi' failed.
valgrind: Heap block lo/hi size mismatch: lo = 368, hi = 86019936.
This is probably caused by your program erroneously writing past the
end of a heap block and corrupting heap metadata.  If you fix any
invalid writes reported by Memcheck, this assertion failure will
probably go away.  Please try that before reporting this as a bug.


host stacktrace:
==327==    at 0x38083F48: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==327==    by 0x38084064: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==327==    by 0x380841F1: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==327==    by 0x38091A9C: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==327==    by 0x3807D673: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==327==    by 0x3807BF03: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==327==    by 0x380800DA: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==327==    by 0x3807B49A: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==327==    by 0x38059401: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==327==    by 0x802D59E7D: ???
==327==    by 0x802CA9F2F: ???
==327==    by 0x80200838F: ???
==327==    by 0x401194: shuffle (deck.c:34)

sched status:
  running_tid=1

Thread 1: status = VgTs_Runnable (lwpid 327)
==327==    at 0x4011AF: shuffle (deck.c:36)
==327==    by 0x400AC4: main (main.c:67)


Note: see also the FAQ in the source distribution.
It contains workarounds to several common problems.
In particular, if Valgrind aborted or crashed after
identifying problems in your program, there's a good chance
that fixing those problems will prevent Valgrind aborting or
crashing, especially if it happened in m_mallocfree.c.

If that doesn't help, please report this bug to: www.valgrind.org

In the bug report, send all the above text, the valgrind
version, and what OS and version you are using.  Thanks.

Running a simulation with 25000 draws for 3 hands...
Valgrind reported errors:
==332== Memcheck, a memory error detector
==332== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==332== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==332== Command: ./poker inp.txt 25000
==332== Parent PID: 331
==332== 
==332== Invalid write of size 8
==332==    at 0x40149C: make_deck_exclude (deck.c:108)
==332==    by 0x401616: build_remaining_deck (deck.c:156)
==332==    by 0x400A6C: main (main.c:59)
==332==  Address 0x5208cd8 is 0 bytes after a block of size 248 alloc'd
==332==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==332==    by 0x4013C2: make_deck_exclude (deck.c:99)
==332==    by 0x401616: build_remaining_deck (deck.c:156)
==332==    by 0x400A6C: main (main.c:59)
==332== 
==332== Invalid write of size 8
==332==    at 0x4014B7: make_deck_exclude (deck.c:110)
==332==    by 0x401616: build_remaining_deck (deck.c:156)
==332==    by 0x400A6C: main (main.c:59)
==332==  Address 0x5208e68 is 0 bytes after a block of size 248 alloc'd
==332==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==332==    by 0x4013E3: make_deck_exclude (deck.c:102)
==332==    by 0x401616: build_remaining_deck (deck.c:156)
==332==    by 0x400A6C: main (main.c:59)
==332== 
==332== Invalid read of size 8
==332==    at 0x40119A: shuffle (deck.c:35)
==332==    by 0x400AC4: main (main.c:67)
==332==  Address 0x5209b38 is 0 bytes after a block of size 8 alloc'd
==332==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==332==    by 0x401488: make_deck_exclude (deck.c:108)
==332==    by 0x401616: build_remaining_deck (deck.c:156)
==332==    by 0x400A6C: main (main.c:59)
==332== 
==332== Invalid read of size 8
==332==    at 0x4011AF: shuffle (deck.c:36)
==332==    by 0x400AC4: main (main.c:67)
==332==  Address 0x5209bb8 is 24 bytes before a block of size 8 alloc'd
==332==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==332==    by 0x401488: make_deck_exclude (deck.c:108)
==332==    by 0x401616: build_remaining_deck (deck.c:156)
==332==    by 0x400A6C: main (main.c:59)
==332== 
==332== Invalid write of size 8
==332==    at 0x4011B2: shuffle (deck.c:36)
==332==    by 0x400AC4: main (main.c:67)
==332==  Address 0x5209b38 is 0 bytes after a block of size 8 alloc'd
==332==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==332==    by 0x401488: make_deck_exclude (deck.c:108)
==332==    by 0x401616: build_remaining_deck (deck.c:156)
==332==    by 0x400A6C: main (main.c:59)
==332== 
==332== Invalid write of size 8
==332==    at 0x4011BB: shuffle (deck.c:37)
==332==    by 0x400AC4: main (main.c:67)
==332==  Address 0x5209bb8 is 24 bytes before a block of size 8 alloc'd
==332==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==332==    by 0x401488: make_deck_exclude (deck.c:108)
==332==    by 0x401616: build_remaining_deck (deck.c:156)
==332==    by 0x400A6C: main (main.c:59)
==332== 
==332== Invalid read of size 4
==332==    at 0x4031AC: future_cards_from_deck (future.c:51)
==332==    by 0x400AD0: main (main.c:69)
==332==  Address 0x20000000e is not stack'd, malloc'd or (recently) free'd
==332== 
==332== 
==332== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==332==  Access not within mapped region at address 0x20000000E
==332==    at 0x4031AC: future_cards_from_deck (future.c:51)
==332==    by 0x400AD0: main (main.c:69)
==332==  If you believe this happened as a result of a stack
==332==  overflow in your program's main thread (unlikely but
==332==  possible), you can try to increase the size of the
==332==  main thread stack using the --main-stacksize= flag.
==332==  The main thread stack size used in this run was 8388608.
==332== 
==332== HEAP SUMMARY:
==332==     in use at exit: 2,224 bytes in 86 blocks
==332==   total heap usage: 164 allocs, 78 frees, 12,086 bytes allocated
==332== 
==332== LEAK SUMMARY:
==332==    definitely lost: 776 bytes in 17 blocks
==332==    indirectly lost: 248 bytes in 31 blocks
==332==      possibly lost: 0 bytes in 0 blocks
==332==    still reachable: 1,200 bytes in 38 blocks
==332==         suppressed: 0 bytes in 0 blocks
==332== Rerun with --leak-check=full to see details of leaked memory
==332== 
==332== For counts of detected and suppressed errors, rerun with: -v
==332== ERROR SUMMARY: 79 errors from 7 contexts (suppressed: 0 from 0)
Running a simulation with 25000 draws for 3 hands...
Valgrind reported errors:
==337== Memcheck, a memory error detector
==337== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==337== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==337== Command: ./poker inp2.txt 25000
==337== Parent PID: 336
==337== 
==337== Invalid write of size 8
==337==    at 0x40149C: make_deck_exclude (deck.c:108)
==337==    by 0x401616: build_remaining_deck (deck.c:156)
==337==    by 0x400A6C: main (main.c:59)
==337==  Address 0x5208cd8 is 0 bytes after a block of size 248 alloc'd
==337==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==337==    by 0x4013C2: make_deck_exclude (deck.c:99)
==337==    by 0x401616: build_remaining_deck (deck.c:156)
==337==    by 0x400A6C: main (main.c:59)
==337== 
==337== Invalid write of size 8
==337==    at 0x4014B7: make_deck_exclude (deck.c:110)
==337==    by 0x401616: build_remaining_deck (deck.c:156)
==337==    by 0x400A6C: main (main.c:59)
==337==  Address 0x5208e68 is 0 bytes after a block of size 248 alloc'd
==337==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==337==    by 0x4013E3: make_deck_exclude (deck.c:102)
==337==    by 0x401616: build_remaining_deck (deck.c:156)
==337==    by 0x400A6C: main (main.c:59)
==337== 
==337== Invalid read of size 8
==337==    at 0x40119A: shuffle (deck.c:35)
==337==    by 0x400AC4: main (main.c:67)
==337==  Address 0x5209b38 is 0 bytes after a block of size 8 alloc'd
==337==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==337==    by 0x401488: make_deck_exclude (deck.c:108)
==337==    by 0x401616: build_remaining_deck (deck.c:156)
==337==    by 0x400A6C: main (main.c:59)
==337== 
==337== Invalid read of size 8
==337==    at 0x4011AF: shuffle (deck.c:36)
==337==    by 0x400AC4: main (main.c:67)
==337==  Address 0x5209bb8 is 24 bytes before a block of size 8 alloc'd
==337==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==337==    by 0x401488: make_deck_exclude (deck.c:108)
==337==    by 0x401616: build_remaining_deck (deck.c:156)
==337==    by 0x400A6C: main (main.c:59)
==337== 
==337== Invalid write of size 8
==337==    at 0x4011B2: shuffle (deck.c:36)
==337==    by 0x400AC4: main (main.c:67)
==337==  Address 0x5209b38 is 0 bytes after a block of size 8 alloc'd
==337==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==337==    by 0x401488: make_deck_exclude (deck.c:108)
==337==    by 0x401616: build_remaining_deck (deck.c:156)
==337==    by 0x400A6C: main (main.c:59)
==337== 
==337== Invalid write of size 8
==337==    at 0x4011BB: shuffle (deck.c:37)
==337==    by 0x400AC4: main (main.c:67)
==337==  Address 0x5209bb8 is 24 bytes before a block of size 8 alloc'd
==337==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==337==    by 0x401488: make_deck_exclude (deck.c:108)
==337==    by 0x401616: build_remaining_deck (deck.c:156)
==337==    by 0x400A6C: main (main.c:59)
==337== 
==337== Invalid read of size 4
==337==    at 0x4031AC: future_cards_from_deck (future.c:51)
==337==    by 0x400AD0: main (main.c:69)
==337==  Address 0x20000000e is not stack'd, malloc'd or (recently) free'd
==337== 
==337== 
==337== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==337==  Access not within mapped region at address 0x20000000E
==337==    at 0x4031AC: future_cards_from_deck (future.c:51)
==337==    by 0x400AD0: main (main.c:69)
==337==  If you believe this happened as a result of a stack
==337==  overflow in your program's main thread (unlikely but
==337==  possible), you can try to increase the size of the
==337==  main thread stack using the --main-stacksize= flag.
==337==  The main thread stack size used in this run was 8388608.
==337== 
==337== HEAP SUMMARY:
==337==     in use at exit: 2,224 bytes in 86 blocks
==337==   total heap usage: 164 allocs, 78 frees, 12,086 bytes allocated
==337== 
==337== LEAK SUMMARY:
==337==    definitely lost: 776 bytes in 17 blocks
==337==    indirectly lost: 248 bytes in 31 blocks
==337==      possibly lost: 0 bytes in 0 blocks
==337==    still reachable: 1,200 bytes in 38 blocks
==337==         suppressed: 0 bytes in 0 blocks
==337== Rerun with --leak-check=full to see details of leaked memory
==337== 
==337== For counts of detected and suppressed errors, rerun with: -v
==337== ERROR SUMMARY: 79 errors from 7 contexts (suppressed: 0 from 0)
Running a simulation with 25000 draws for 2 hands...
Valgrind reported errors:
==342== Memcheck, a memory error detector
==342== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==342== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==342== Command: ./poker inp2.txt 25000
==342== Parent PID: 341
==342== 
==342== Invalid write of size 8
==342==    at 0x40149C: make_deck_exclude (deck.c:108)
==342==    by 0x401616: build_remaining_deck (deck.c:156)
==342==    by 0x400A6C: main (main.c:59)
==342==  Address 0x5208090 is 0 bytes after a block of size 304 alloc'd
==342==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==342==    by 0x4013C2: make_deck_exclude (deck.c:99)
==342==    by 0x401616: build_remaining_deck (deck.c:156)
==342==    by 0x400A6C: main (main.c:59)
==342== 
==342== Invalid write of size 8
==342==    at 0x4014B7: make_deck_exclude (deck.c:110)
==342==    by 0x401616: build_remaining_deck (deck.c:156)
==342==    by 0x400A6C: main (main.c:59)
==342==  Address 0x5208250 is 0 bytes after a block of size 304 alloc'd
==342==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==342==    by 0x4013E3: make_deck_exclude (deck.c:102)
==342==    by 0x401616: build_remaining_deck (deck.c:156)
==342==    by 0x400A6C: main (main.c:59)
==342== 

valgrind: m_mallocfree.c:303 (get_bszB_as_is): Assertion 'bszB_lo == bszB_hi' failed.
valgrind: Heap block lo/hi size mismatch: lo = 368, hi = 86019936.
This is probably caused by your program erroneously writing past the
end of a heap block and corrupting heap metadata.  If you fix any
invalid writes reported by Memcheck, this assertion failure will
probably go away.  Please try that before reporting this as a bug.


host stacktrace:
==342==    at 0x38083F48: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==342==    by 0x38084064: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==342==    by 0x380841F1: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==342==    by 0x38091A9C: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==342==    by 0x3807D673: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==342==    by 0x3807BF03: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==342==    by 0x380800DA: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==342==    by 0x3807B49A: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==342==    by 0x38059401: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==342==    by 0x802D59B05: ???
==342==    by 0x802CA9F2F: ???
==342==    by 0x80200838F: ???
==342==    by 0x401194: shuffle (deck.c:34)

sched status:
  running_tid=1

Thread 1: status = VgTs_Runnable (lwpid 342)
==342==    at 0x4011AF: shuffle (deck.c:36)
==342==    by 0x400AC4: main (main.c:67)


Note: see also the FAQ in the source distribution.
It contains workarounds to several common problems.
In particular, if Valgrind aborted or crashed after
identifying problems in your program, there's a good chance
that fixing those problems will prevent Valgrind aborting or
crashing, especially if it happened in m_mallocfree.c.

If that doesn't help, please report this bug to: www.valgrind.org

In the bug report, send all the above text, the valgrind
version, and what OS and version you are using.  Thanks.

Running a simulation with 80000 draws for 4 hands...
Valgrind reported errors:
==347== Memcheck, a memory error detector
==347== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==347== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==347== Command: ./poker inp3.txt 80000
==347== Parent PID: 346
==347== 
==347== Invalid write of size 8
==347==    at 0x40149C: make_deck_exclude (deck.c:108)
==347==    by 0x401616: build_remaining_deck (deck.c:156)
==347==    by 0x400A6C: main (main.c:59)
==347==  Address 0x5208fa0 is 0 bytes after a block of size 192 alloc'd
==347==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==347==    by 0x4013C2: make_deck_exclude (deck.c:99)
==347==    by 0x401616: build_remaining_deck (deck.c:156)
==347==    by 0x400A6C: main (main.c:59)
==347== 
==347== Invalid write of size 8
==347==    at 0x4014B7: make_deck_exclude (deck.c:110)
==347==    by 0x401616: build_remaining_deck (deck.c:156)
==347==    by 0x400A6C: main (main.c:59)
==347==  Address 0x52090f0 is 0 bytes after a block of size 192 alloc'd
==347==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==347==    by 0x4013E3: make_deck_exclude (deck.c:102)
==347==    by 0x401616: build_remaining_deck (deck.c:156)
==347==    by 0x400A6C: main (main.c:59)
==347== 
==347== Invalid read of size 8
==347==    at 0x4011AF: shuffle (deck.c:36)
==347==    by 0x400AC4: main (main.c:67)
==347==  Address 0x5209b68 is 24 bytes before a block of size 8 alloc'd
==347==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==347==    by 0x401488: make_deck_exclude (deck.c:108)
==347==    by 0x401616: build_remaining_deck (deck.c:156)
==347==    by 0x400A6C: main (main.c:59)
==347== 
==347== Invalid write of size 8
==347==    at 0x4011BB: shuffle (deck.c:37)
==347==    by 0x400AC4: main (main.c:67)
==347==  Address 0x5209b68 is 24 bytes before a block of size 8 alloc'd
==347==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==347==    by 0x401488: make_deck_exclude (deck.c:108)
==347==    by 0x401616: build_remaining_deck (deck.c:156)
==347==    by 0x400A6C: main (main.c:59)
==347== 
==347== Invalid read of size 8
==347==    at 0x40119A: shuffle (deck.c:35)
==347==    by 0x400AC4: main (main.c:67)
==347==  Address 0x5209b38 is 0 bytes after a block of size 8 alloc'd
==347==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==347==    by 0x401488: make_deck_exclude (deck.c:108)
==347==    by 0x401616: build_remaining_deck (deck.c:156)
==347==    by 0x400A6C: main (main.c:59)
==347== 
==347== Invalid write of size 8
==347==    at 0x4011B2: shuffle (deck.c:36)
==347==    by 0x400AC4: main (main.c:67)
==347==  Address 0x5209b38 is 0 bytes after a block of size 8 alloc'd
==347==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==347==    by 0x401488: make_deck_exclude (deck.c:108)
==347==    by 0x401616: build_remaining_deck (deck.c:156)
==347==    by 0x400A6C: main (main.c:59)
==347== 
==347== Invalid read of size 4
==347==    at 0x4031AC: future_cards_from_deck (future.c:51)
==347==    by 0x400AD0: main (main.c:69)
==347==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==347== 
==347== 
==347== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==347==  Access not within mapped region at address 0x0
==347==    at 0x4031AC: future_cards_from_deck (future.c:51)
==347==    by 0x400AD0: main (main.c:69)
==347==  If you believe this happened as a result of a stack
==347==  overflow in your program's main thread (unlikely but
==347==  possible), you can try to increase the size of the
==347==  main thread stack using the --main-stacksize= flag.
==347==  The main thread stack size used in this run was 8388608.
==347== 
==347== HEAP SUMMARY:
==347==     in use at exit: 2,160 bytes in 87 blocks
==347==   total heap usage: 166 allocs, 79 frees, 12,264 bytes allocated
==347== 
==347== LEAK SUMMARY:
==347==    definitely lost: 728 bytes in 18 blocks
==347==    indirectly lost: 200 bytes in 25 blocks
==347==      possibly lost: 0 bytes in 0 blocks
==347==    still reachable: 1,232 bytes in 44 blocks
==347==         suppressed: 0 bytes in 0 blocks
==347== Rerun with --leak-check=full to see details of leaked memory
==347== 
==347== For counts of detected and suppressed errors, rerun with: -v
==347== ERROR SUMMARY: 74 errors from 7 contexts (suppressed: 0 from 0)
Running a simulation with 30000 draws for 2 hands...
Valgrind reported errors:
==352== Memcheck, a memory error detector
==352== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==352== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==352== Command: ./poker inp.txt 30000
==352== Parent PID: 351
==352== 
==352== Invalid write of size 8
==352==    at 0x40149C: make_deck_exclude (deck.c:108)
==352==    by 0x401616: build_remaining_deck (deck.c:156)
==352==    by 0x400A6C: main (main.c:59)
==352==  Address 0x5207b50 is 0 bytes after a block of size 304 alloc'd
==352==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==352==    by 0x4013C2: make_deck_exclude (deck.c:99)
==352==    by 0x401616: build_remaining_deck (deck.c:156)
==352==    by 0x400A6C: main (main.c:59)
==352== 
==352== Invalid write of size 8
==352==    at 0x4014B7: make_deck_exclude (deck.c:110)
==352==    by 0x401616: build_remaining_deck (deck.c:156)
==352==    by 0x400A6C: main (main.c:59)
==352==  Address 0x5207d10 is 0 bytes after a block of size 304 alloc'd
==352==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==352==    by 0x4013E3: make_deck_exclude (deck.c:102)
==352==    by 0x401616: build_remaining_deck (deck.c:156)
==352==    by 0x400A6C: main (main.c:59)
==352== 
==352== 
==352== Process terminating with default action of signal 6 (SIGABRT): dumping core
==352==    at 0x4E6F428: raise (raise.c:54)
==352==    by 0x4E71029: abort (abort.c:89)
==352==    by 0x4E67BD6: __assert_fail_base (assert.c:92)
==352==    by 0x4E67C81: __assert_fail (assert.c:101)
==352==    by 0x40201C: copy_straight (eval.c:333)
==352==    by 0x4022B8: find_straight (eval.c:373)
==352==    by 0x402457: evaluate_hand (eval.c:389)
==352==    by 0x402F12: compare_hands (eval.c:267)
==352==    by 0x4037AB: win_hand (main.c:20)
==352==    by 0x400ADB: main (main.c:71)
==352== 
==352== HEAP SUMMARY:
==352==     in use at exit: 2,000 bytes in 73 blocks
==352==   total heap usage: 158 allocs, 85 frees, 12,527 bytes allocated
==352== 
==352== LEAK SUMMARY:
==352==    definitely lost: 472 bytes in 9 blocks
==352==    indirectly lost: 0 bytes in 0 blocks
==352==      possibly lost: 0 bytes in 0 blocks
==352==    still reachable: 1,528 bytes in 64 blocks
==352==         suppressed: 0 bytes in 0 blocks
==352== Rerun with --leak-check=full to see details of leaked memory
==352== 
==352== For counts of detected and suppressed errors, rerun with: -v
==352== ERROR SUMMARY: 14 errors from 2 contexts (suppressed: 0 from 0)
 - Next, few Seven Card Stud hands
Running a simulation with 30000 draws for 2 hands...
Valgrind reported errors:
==357== Memcheck, a memory error detector
==357== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==357== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==357== Command: ./poker inp.txt 30000
==357== Parent PID: 356
==357== 
==357== Invalid write of size 8
==357==    at 0x40149C: make_deck_exclude (deck.c:108)
==357==    by 0x401616: build_remaining_deck (deck.c:156)
==357==    by 0x400A6C: main (main.c:59)
==357==  Address 0x5208160 is 0 bytes after a block of size 304 alloc'd
==357==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==357==    by 0x4013C2: make_deck_exclude (deck.c:99)
==357==    by 0x401616: build_remaining_deck (deck.c:156)
==357==    by 0x400A6C: main (main.c:59)
==357== 
==357== Invalid write of size 8
==357==    at 0x4014B7: make_deck_exclude (deck.c:110)
==357==    by 0x401616: build_remaining_deck (deck.c:156)
==357==    by 0x400A6C: main (main.c:59)
==357==  Address 0x5208320 is 0 bytes after a block of size 304 alloc'd
==357==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==357==    by 0x4013E3: make_deck_exclude (deck.c:102)
==357==    by 0x401616: build_remaining_deck (deck.c:156)
==357==    by 0x400A6C: main (main.c:59)
==357== 
==357== 
==357== Process terminating with default action of signal 6 (SIGABRT): dumping core
==357==    at 0x4E6F428: raise (raise.c:54)
==357==    by 0x4E71029: abort (abort.c:89)
==357==    by 0x4E67BD6: __assert_fail_base (assert.c:92)
==357==    by 0x4E67C81: __assert_fail (assert.c:101)
==357==    by 0x40201C: copy_straight (eval.c:333)
==357==    by 0x4022B8: find_straight (eval.c:373)
==357==    by 0x402457: evaluate_hand (eval.c:389)
==357==    by 0x402F12: compare_hands (eval.c:267)
==357==    by 0x4037AB: win_hand (main.c:20)
==357==    by 0x400ADB: main (main.c:71)
==357== 
==357== HEAP SUMMARY:
==357==     in use at exit: 2,136 bytes in 80 blocks
==357==   total heap usage: 3,315 allocs, 3,235 frees, 101,063 bytes allocated
==357== 
==357== LEAK SUMMARY:
==357==    definitely lost: 480 bytes in 10 blocks
==357==    indirectly lost: 0 bytes in 0 blocks
==357==      possibly lost: 0 bytes in 0 blocks
==357==    still reachable: 1,656 bytes in 70 blocks
==357==         suppressed: 0 bytes in 0 blocks
==357== Rerun with --leak-check=full to see details of leaked memory
==357== 
==357== For counts of detected and suppressed errors, rerun with: -v
==357== ERROR SUMMARY: 16 errors from 2 contexts (suppressed: 0 from 0)
Running a simulation with 40000 draws for 3 hands...
Valgrind reported errors:
==362== Memcheck, a memory error detector
==362== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==362== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==362== Command: ./poker inp2.txt 40000
==362== Parent PID: 361
==362== 
==362== Invalid write of size 8
==362==    at 0x40149C: make_deck_exclude (deck.c:108)
==362==    by 0x401616: build_remaining_deck (deck.c:156)
==362==    by 0x400A6C: main (main.c:59)
==362==  Address 0x5208ba8 is 0 bytes after a block of size 248 alloc'd
==362==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==362==    by 0x4013C2: make_deck_exclude (deck.c:99)
==362==    by 0x401616: build_remaining_deck (deck.c:156)
==362==    by 0x400A6C: main (main.c:59)
==362== 
==362== Invalid write of size 8
==362==    at 0x4014B7: make_deck_exclude (deck.c:110)
==362==    by 0x401616: build_remaining_deck (deck.c:156)
==362==    by 0x400A6C: main (main.c:59)
==362==  Address 0x5208d38 is 0 bytes after a block of size 248 alloc'd
==362==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==362==    by 0x4013E3: make_deck_exclude (deck.c:102)
==362==    by 0x401616: build_remaining_deck (deck.c:156)
==362==    by 0x400A6C: main (main.c:59)
==362== 
==362== 
==362== HEAP SUMMARY:
==362==     in use at exit: 488 bytes in 11 blocks
==362==   total heap usage: 239,686 allocs, 239,675 frees, 6,719,346 bytes allocated
==362== 
==362== LEAK SUMMARY:
==362==    definitely lost: 488 bytes in 11 blocks
==362==    indirectly lost: 0 bytes in 0 blocks
==362==      possibly lost: 0 bytes in 0 blocks
==362==    still reachable: 0 bytes in 0 blocks
==362==         suppressed: 0 bytes in 0 blocks
==362== Rerun with --leak-check=full to see details of leaked memory
==362== 
==362== For counts of detected and suppressed errors, rerun with: -v
==362== ERROR SUMMARY: 18 errors from 2 contexts (suppressed: 0 from 0)
 - Then one from a completely made up poker variant
Running a simulation with 100000 draws for 6 hands...
Valgrind reported errors:
==367== Memcheck, a memory error detector
==367== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==367== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==367== Command: ./poker whacky.txt 100000
==367== Parent PID: 366
==367== 
==367== Invalid write of size 8
==367==    at 0x40149C: make_deck_exclude (deck.c:108)
==367==    by 0x401616: build_remaining_deck (deck.c:156)
==367==    by 0x400A6C: main (main.c:59)
==367==  Address 0x520a9d0 is 0 bytes after a block of size 80 alloc'd
==367==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==367==    by 0x4013C2: make_deck_exclude (deck.c:99)
==367==    by 0x401616: build_remaining_deck (deck.c:156)
==367==    by 0x400A6C: main (main.c:59)
==367== 
==367== Invalid write of size 8
==367==    at 0x4014B7: make_deck_exclude (deck.c:110)
==367==    by 0x401616: build_remaining_deck (deck.c:156)
==367==    by 0x400A6C: main (main.c:59)
==367==  Address 0x520aab0 is 0 bytes after a block of size 80 alloc'd
==367==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==367==    by 0x4013E3: make_deck_exclude (deck.c:102)
==367==    by 0x401616: build_remaining_deck (deck.c:156)
==367==    by 0x400A6C: main (main.c:59)
==367== 
==367== Invalid read of size 8
==367==    at 0x4011AF: shuffle (deck.c:36)
==367==    by 0x400AC4: main (main.c:67)
==367==  Address 0x520b0a8 is 16 bytes after a block of size 8 alloc'd
==367==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==367==    by 0x401488: make_deck_exclude (deck.c:108)
==367==    by 0x401616: build_remaining_deck (deck.c:156)
==367==    by 0x400A6C: main (main.c:59)
==367== 
==367== Invalid write of size 8
==367==    at 0x4011BB: shuffle (deck.c:37)
==367==    by 0x400AC4: main (main.c:67)
==367==  Address 0x520b0a8 is 16 bytes after a block of size 8 alloc'd
==367==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==367==    by 0x401488: make_deck_exclude (deck.c:108)
==367==    by 0x401616: build_remaining_deck (deck.c:156)
==367==    by 0x400A6C: main (main.c:59)
==367== 
==367== Invalid read of size 8
==367==    at 0x40119A: shuffle (deck.c:35)
==367==    by 0x400AC4: main (main.c:67)
==367==  Address 0x520b098 is 0 bytes after a block of size 8 alloc'd
==367==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==367==    by 0x401488: make_deck_exclude (deck.c:108)
==367==    by 0x401616: build_remaining_deck (deck.c:156)
==367==    by 0x400A6C: main (main.c:59)
==367== 
==367== Invalid write of size 8
==367==    at 0x4011B2: shuffle (deck.c:36)
==367==    by 0x400AC4: main (main.c:67)
==367==  Address 0x520b098 is 0 bytes after a block of size 8 alloc'd
==367==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==367==    by 0x401488: make_deck_exclude (deck.c:108)
==367==    by 0x401616: build_remaining_deck (deck.c:156)
==367==    by 0x400A6C: main (main.c:59)
==367== 
==367== Invalid read of size 4
==367==    at 0x4031AC: future_cards_from_deck (future.c:51)
==367==    by 0x400AD0: main (main.c:69)
==367==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==367== 
==367== 
==367== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==367==  Access not within mapped region at address 0x0
==367==    at 0x4031AC: future_cards_from_deck (future.c:51)
==367==    by 0x400AD0: main (main.c:69)
==367==  If you believe this happened as a result of a stack
==367==  overflow in your program's main thread (unlikely but
==367==  possible), you can try to increase the size of the
==367==  main thread stack using the --main-stacksize= flag.
==367==  The main thread stack size used in this run was 8388608.
==367== 
==367== HEAP SUMMARY:
==367==     in use at exit: 2,392 bytes in 100 blocks
==367==   total heap usage: 229 allocs, 129 frees, 13,660 bytes allocated
==367== 
==367== LEAK SUMMARY:
==367==    definitely lost: 632 bytes in 20 blocks
==367==    indirectly lost: 112 bytes in 14 blocks
==367==      possibly lost: 0 bytes in 0 blocks
==367==    still reachable: 1,648 bytes in 66 blocks
==367==         suppressed: 0 bytes in 0 blocks
==367== Rerun with --leak-check=full to see details of leaked memory
==367== 
==367== For counts of detected and suppressed errors, rerun with: -v
==367== ERROR SUMMARY: 55 errors from 7 contexts (suppressed: 0 from 0)

Overall Grade: F
