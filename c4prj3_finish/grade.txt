Grading at Mon Aug 10 17:11:51 UTC 2020
Running 'make clean' to do a clean build of your project
rm -rf *.o poker *~
Running 'make poker OTHERFLAGS=-O3' to build your project
gcc -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3 -c cards.c
gcc -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3 -c deck.c
gcc -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3 -c eval.c
gcc -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3 -c future.c
gcc -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3 -c input.c
gcc -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3 -c main.c
gcc -o poker -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3 cards.o deck.o eval.o future.o input.o main.o
 - Starting with some Texas Hold'em hands
Running a simulation with 20000 draws for 2 hands...
Valgrind reported errors:
==541== Memcheck, a memory error detector
==541== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==541== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==541== Command: ./poker inp.txt 20000
==541== Parent PID: 540
==541== 
==541== Invalid write of size 8
==541==    at 0x4014FC: make_deck_exclude (deck.c:108)
==541==    by 0x401676: build_remaining_deck (deck.c:156)
==541==    by 0x400ACC: main (main.c:59)
==541==  Address 0x5208090 is 0 bytes after a block of size 304 alloc'd
==541==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==541==    by 0x401422: make_deck_exclude (deck.c:99)
==541==    by 0x401676: build_remaining_deck (deck.c:156)
==541==    by 0x400ACC: main (main.c:59)
==541== 
==541== Invalid write of size 8
==541==    at 0x401517: make_deck_exclude (deck.c:110)
==541==    by 0x401676: build_remaining_deck (deck.c:156)
==541==    by 0x400ACC: main (main.c:59)
==541==  Address 0x5208250 is 0 bytes after a block of size 304 alloc'd
==541==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==541==    by 0x401443: make_deck_exclude (deck.c:102)
==541==    by 0x401676: build_remaining_deck (deck.c:156)
==541==    by 0x400ACC: main (main.c:59)
==541== 

valgrind: m_mallocfree.c:303 (get_bszB_as_is): Assertion 'bszB_lo == bszB_hi' failed.
valgrind: Heap block lo/hi size mismatch: lo = 368, hi = 86019936.
This is probably caused by your program erroneously writing past the
end of a heap block and corrupting heap metadata.  If you fix any
invalid writes reported by Memcheck, this assertion failure will
probably go away.  Please try that before reporting this as a bug.


host stacktrace:
==541==    at 0x38083F48: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==541==    by 0x38084064: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==541==    by 0x380841F1: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==541==    by 0x38091A9C: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==541==    by 0x3807D673: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==541==    by 0x3807BF03: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==541==    by 0x380800DA: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==541==    by 0x3807B49A: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==541==    by 0x38059401: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==541==    by 0x802D59E7D: ???
==541==    by 0x802CA9F2F: ???
==541==    by 0x80200838F: ???
==541==    by 0x4011F4: shuffle (deck.c:34)

sched status:
  running_tid=1

Thread 1: status = VgTs_Runnable (lwpid 541)
==541==    at 0x40120F: shuffle (deck.c:36)
==541==    by 0x400B24: main (main.c:67)


Note: see also the FAQ in the source distribution.
It contains workarounds to several common problems.
In particular, if Valgrind aborted or crashed after
identifying problems in your program, there's a good chance
that fixing those problems will prevent Valgrind aborting or
crashing, especially if it happened in m_mallocfree.c.

If that doesn't help, please report this bug to: www.valgrind.org

In the bug report, send all the above text, the valgrind
version, and what OS and version you are using.  Thanks.

Running a simulation with 25000 draws for 3 hands...
Valgrind reported errors:
==546== Memcheck, a memory error detector
==546== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==546== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==546== Command: ./poker inp.txt 25000
==546== Parent PID: 545
==546== 
==546== Invalid write of size 8
==546==    at 0x4014FC: make_deck_exclude (deck.c:108)
==546==    by 0x401676: build_remaining_deck (deck.c:156)
==546==    by 0x400ACC: main (main.c:59)
==546==  Address 0x5208cd8 is 0 bytes after a block of size 248 alloc'd
==546==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==546==    by 0x401422: make_deck_exclude (deck.c:99)
==546==    by 0x401676: build_remaining_deck (deck.c:156)
==546==    by 0x400ACC: main (main.c:59)
==546== 
==546== Invalid write of size 8
==546==    at 0x401517: make_deck_exclude (deck.c:110)
==546==    by 0x401676: build_remaining_deck (deck.c:156)
==546==    by 0x400ACC: main (main.c:59)
==546==  Address 0x5208e68 is 0 bytes after a block of size 248 alloc'd
==546==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==546==    by 0x401443: make_deck_exclude (deck.c:102)
==546==    by 0x401676: build_remaining_deck (deck.c:156)
==546==    by 0x400ACC: main (main.c:59)
==546== 
==546== Invalid read of size 8
==546==    at 0x4011FA: shuffle (deck.c:35)
==546==    by 0x400B24: main (main.c:67)
==546==  Address 0x5209b38 is 0 bytes after a block of size 8 alloc'd
==546==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==546==    by 0x4014E8: make_deck_exclude (deck.c:108)
==546==    by 0x401676: build_remaining_deck (deck.c:156)
==546==    by 0x400ACC: main (main.c:59)
==546== 
==546== Invalid read of size 8
==546==    at 0x40120F: shuffle (deck.c:36)
==546==    by 0x400B24: main (main.c:67)
==546==  Address 0x5209bb8 is 24 bytes before a block of size 8 alloc'd
==546==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==546==    by 0x4014E8: make_deck_exclude (deck.c:108)
==546==    by 0x401676: build_remaining_deck (deck.c:156)
==546==    by 0x400ACC: main (main.c:59)
==546== 
==546== Invalid write of size 8
==546==    at 0x401212: shuffle (deck.c:36)
==546==    by 0x400B24: main (main.c:67)
==546==  Address 0x5209b38 is 0 bytes after a block of size 8 alloc'd
==546==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==546==    by 0x4014E8: make_deck_exclude (deck.c:108)
==546==    by 0x401676: build_remaining_deck (deck.c:156)
==546==    by 0x400ACC: main (main.c:59)
==546== 
==546== Invalid write of size 8
==546==    at 0x40121B: shuffle (deck.c:37)
==546==    by 0x400B24: main (main.c:67)
==546==  Address 0x5209bb8 is 24 bytes before a block of size 8 alloc'd
==546==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==546==    by 0x4014E8: make_deck_exclude (deck.c:108)
==546==    by 0x401676: build_remaining_deck (deck.c:156)
==546==    by 0x400ACC: main (main.c:59)
==546== 
==546== Invalid read of size 4
==546==    at 0x40369C: future_cards_from_deck (future.c:51)
==546==    by 0x400B30: main (main.c:69)
==546==  Address 0x20000000e is not stack'd, malloc'd or (recently) free'd
==546== 
==546== 
==546== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==546==  Access not within mapped region at address 0x20000000E
==546==    at 0x40369C: future_cards_from_deck (future.c:51)
==546==    by 0x400B30: main (main.c:69)
==546==  If you believe this happened as a result of a stack
==546==  overflow in your program's main thread (unlikely but
==546==  possible), you can try to increase the size of the
==546==  main thread stack using the --main-stacksize= flag.
==546==  The main thread stack size used in this run was 8388608.
==546== 
==546== HEAP SUMMARY:
==546==     in use at exit: 2,224 bytes in 86 blocks
==546==   total heap usage: 164 allocs, 78 frees, 12,086 bytes allocated
==546== 
==546== LEAK SUMMARY:
==546==    definitely lost: 776 bytes in 17 blocks
==546==    indirectly lost: 248 bytes in 31 blocks
==546==      possibly lost: 0 bytes in 0 blocks
==546==    still reachable: 1,200 bytes in 38 blocks
==546==         suppressed: 0 bytes in 0 blocks
==546== Rerun with --leak-check=full to see details of leaked memory
==546== 
==546== For counts of detected and suppressed errors, rerun with: -v
==546== ERROR SUMMARY: 79 errors from 7 contexts (suppressed: 0 from 0)
Running a simulation with 25000 draws for 3 hands...
Valgrind reported errors:
==551== Memcheck, a memory error detector
==551== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==551== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==551== Command: ./poker inp2.txt 25000
==551== Parent PID: 550
==551== 
==551== Invalid write of size 8
==551==    at 0x4014FC: make_deck_exclude (deck.c:108)
==551==    by 0x401676: build_remaining_deck (deck.c:156)
==551==    by 0x400ACC: main (main.c:59)
==551==  Address 0x5208cd8 is 0 bytes after a block of size 248 alloc'd
==551==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==551==    by 0x401422: make_deck_exclude (deck.c:99)
==551==    by 0x401676: build_remaining_deck (deck.c:156)
==551==    by 0x400ACC: main (main.c:59)
==551== 
==551== Invalid write of size 8
==551==    at 0x401517: make_deck_exclude (deck.c:110)
==551==    by 0x401676: build_remaining_deck (deck.c:156)
==551==    by 0x400ACC: main (main.c:59)
==551==  Address 0x5208e68 is 0 bytes after a block of size 248 alloc'd
==551==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==551==    by 0x401443: make_deck_exclude (deck.c:102)
==551==    by 0x401676: build_remaining_deck (deck.c:156)
==551==    by 0x400ACC: main (main.c:59)
==551== 
==551== Invalid read of size 8
==551==    at 0x4011FA: shuffle (deck.c:35)
==551==    by 0x400B24: main (main.c:67)
==551==  Address 0x5209b38 is 0 bytes after a block of size 8 alloc'd
==551==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==551==    by 0x4014E8: make_deck_exclude (deck.c:108)
==551==    by 0x401676: build_remaining_deck (deck.c:156)
==551==    by 0x400ACC: main (main.c:59)
==551== 
==551== Invalid read of size 8
==551==    at 0x40120F: shuffle (deck.c:36)
==551==    by 0x400B24: main (main.c:67)
==551==  Address 0x5209bb8 is 24 bytes before a block of size 8 alloc'd
==551==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==551==    by 0x4014E8: make_deck_exclude (deck.c:108)
==551==    by 0x401676: build_remaining_deck (deck.c:156)
==551==    by 0x400ACC: main (main.c:59)
==551== 
==551== Invalid write of size 8
==551==    at 0x401212: shuffle (deck.c:36)
==551==    by 0x400B24: main (main.c:67)
==551==  Address 0x5209b38 is 0 bytes after a block of size 8 alloc'd
==551==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==551==    by 0x4014E8: make_deck_exclude (deck.c:108)
==551==    by 0x401676: build_remaining_deck (deck.c:156)
==551==    by 0x400ACC: main (main.c:59)
==551== 
==551== Invalid write of size 8
==551==    at 0x40121B: shuffle (deck.c:37)
==551==    by 0x400B24: main (main.c:67)
==551==  Address 0x5209bb8 is 24 bytes before a block of size 8 alloc'd
==551==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==551==    by 0x4014E8: make_deck_exclude (deck.c:108)
==551==    by 0x401676: build_remaining_deck (deck.c:156)
==551==    by 0x400ACC: main (main.c:59)
==551== 
==551== Invalid read of size 4
==551==    at 0x40369C: future_cards_from_deck (future.c:51)
==551==    by 0x400B30: main (main.c:69)
==551==  Address 0x20000000e is not stack'd, malloc'd or (recently) free'd
==551== 
==551== 
==551== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==551==  Access not within mapped region at address 0x20000000E
==551==    at 0x40369C: future_cards_from_deck (future.c:51)
==551==    by 0x400B30: main (main.c:69)
==551==  If you believe this happened as a result of a stack
==551==  overflow in your program's main thread (unlikely but
==551==  possible), you can try to increase the size of the
==551==  main thread stack using the --main-stacksize= flag.
==551==  The main thread stack size used in this run was 8388608.
==551== 
==551== HEAP SUMMARY:
==551==     in use at exit: 2,224 bytes in 86 blocks
==551==   total heap usage: 164 allocs, 78 frees, 12,086 bytes allocated
==551== 
==551== LEAK SUMMARY:
==551==    definitely lost: 776 bytes in 17 blocks
==551==    indirectly lost: 248 bytes in 31 blocks
==551==      possibly lost: 0 bytes in 0 blocks
==551==    still reachable: 1,200 bytes in 38 blocks
==551==         suppressed: 0 bytes in 0 blocks
==551== Rerun with --leak-check=full to see details of leaked memory
==551== 
==551== For counts of detected and suppressed errors, rerun with: -v
==551== ERROR SUMMARY: 79 errors from 7 contexts (suppressed: 0 from 0)
Running a simulation with 25000 draws for 2 hands...
Valgrind reported errors:
==556== Memcheck, a memory error detector
==556== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==556== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==556== Command: ./poker inp2.txt 25000
==556== Parent PID: 555
==556== 
==556== Invalid write of size 8
==556==    at 0x4014FC: make_deck_exclude (deck.c:108)
==556==    by 0x401676: build_remaining_deck (deck.c:156)
==556==    by 0x400ACC: main (main.c:59)
==556==  Address 0x5208090 is 0 bytes after a block of size 304 alloc'd
==556==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==556==    by 0x401422: make_deck_exclude (deck.c:99)
==556==    by 0x401676: build_remaining_deck (deck.c:156)
==556==    by 0x400ACC: main (main.c:59)
==556== 
==556== Invalid write of size 8
==556==    at 0x401517: make_deck_exclude (deck.c:110)
==556==    by 0x401676: build_remaining_deck (deck.c:156)
==556==    by 0x400ACC: main (main.c:59)
==556==  Address 0x5208250 is 0 bytes after a block of size 304 alloc'd
==556==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==556==    by 0x401443: make_deck_exclude (deck.c:102)
==556==    by 0x401676: build_remaining_deck (deck.c:156)
==556==    by 0x400ACC: main (main.c:59)
==556== 

valgrind: m_mallocfree.c:303 (get_bszB_as_is): Assertion 'bszB_lo == bszB_hi' failed.
valgrind: Heap block lo/hi size mismatch: lo = 368, hi = 86019936.
This is probably caused by your program erroneously writing past the
end of a heap block and corrupting heap metadata.  If you fix any
invalid writes reported by Memcheck, this assertion failure will
probably go away.  Please try that before reporting this as a bug.


host stacktrace:
==556==    at 0x38083F48: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==556==    by 0x38084064: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==556==    by 0x380841F1: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==556==    by 0x38091A9C: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==556==    by 0x3807D673: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==556==    by 0x3807BF03: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==556==    by 0x380800DA: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==556==    by 0x3807B49A: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==556==    by 0x38059401: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==556==    by 0x802D59B05: ???
==556==    by 0x802CA9F2F: ???
==556==    by 0x80200838F: ???
==556==    by 0x4011F4: shuffle (deck.c:34)

sched status:
  running_tid=1

Thread 1: status = VgTs_Runnable (lwpid 556)
==556==    at 0x40120F: shuffle (deck.c:36)
==556==    by 0x400B24: main (main.c:67)


Note: see also the FAQ in the source distribution.
It contains workarounds to several common problems.
In particular, if Valgrind aborted or crashed after
identifying problems in your program, there's a good chance
that fixing those problems will prevent Valgrind aborting or
crashing, especially if it happened in m_mallocfree.c.

If that doesn't help, please report this bug to: www.valgrind.org

In the bug report, send all the above text, the valgrind
version, and what OS and version you are using.  Thanks.

Running a simulation with 80000 draws for 4 hands...
Valgrind reported errors:
==561== Memcheck, a memory error detector
==561== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==561== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==561== Command: ./poker inp3.txt 80000
==561== Parent PID: 560
==561== 
==561== Invalid write of size 8
==561==    at 0x4014FC: make_deck_exclude (deck.c:108)
==561==    by 0x401676: build_remaining_deck (deck.c:156)
==561==    by 0x400ACC: main (main.c:59)
==561==  Address 0x5208fa0 is 0 bytes after a block of size 192 alloc'd
==561==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==561==    by 0x401422: make_deck_exclude (deck.c:99)
==561==    by 0x401676: build_remaining_deck (deck.c:156)
==561==    by 0x400ACC: main (main.c:59)
==561== 
==561== Invalid write of size 8
==561==    at 0x401517: make_deck_exclude (deck.c:110)
==561==    by 0x401676: build_remaining_deck (deck.c:156)
==561==    by 0x400ACC: main (main.c:59)
==561==  Address 0x52090f0 is 0 bytes after a block of size 192 alloc'd
==561==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==561==    by 0x401443: make_deck_exclude (deck.c:102)
==561==    by 0x401676: build_remaining_deck (deck.c:156)
==561==    by 0x400ACC: main (main.c:59)
==561== 
==561== Invalid read of size 8
==561==    at 0x40120F: shuffle (deck.c:36)
==561==    by 0x400B24: main (main.c:67)
==561==  Address 0x5209b68 is 24 bytes before a block of size 8 alloc'd
==561==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==561==    by 0x4014E8: make_deck_exclude (deck.c:108)
==561==    by 0x401676: build_remaining_deck (deck.c:156)
==561==    by 0x400ACC: main (main.c:59)
==561== 
==561== Invalid write of size 8
==561==    at 0x40121B: shuffle (deck.c:37)
==561==    by 0x400B24: main (main.c:67)
==561==  Address 0x5209b68 is 24 bytes before a block of size 8 alloc'd
==561==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==561==    by 0x4014E8: make_deck_exclude (deck.c:108)
==561==    by 0x401676: build_remaining_deck (deck.c:156)
==561==    by 0x400ACC: main (main.c:59)
==561== 
==561== Invalid read of size 8
==561==    at 0x4011FA: shuffle (deck.c:35)
==561==    by 0x400B24: main (main.c:67)
==561==  Address 0x5209b38 is 0 bytes after a block of size 8 alloc'd
==561==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==561==    by 0x4014E8: make_deck_exclude (deck.c:108)
==561==    by 0x401676: build_remaining_deck (deck.c:156)
==561==    by 0x400ACC: main (main.c:59)
==561== 
==561== Invalid write of size 8
==561==    at 0x401212: shuffle (deck.c:36)
==561==    by 0x400B24: main (main.c:67)
==561==  Address 0x5209b38 is 0 bytes after a block of size 8 alloc'd
==561==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==561==    by 0x4014E8: make_deck_exclude (deck.c:108)
==561==    by 0x401676: build_remaining_deck (deck.c:156)
==561==    by 0x400ACC: main (main.c:59)
==561== 
==561== Invalid read of size 4
==561==    at 0x40369C: future_cards_from_deck (future.c:51)
==561==    by 0x400B30: main (main.c:69)
==561==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==561== 
==561== 
==561== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==561==  Access not within mapped region at address 0x0
==561==    at 0x40369C: future_cards_from_deck (future.c:51)
==561==    by 0x400B30: main (main.c:69)
==561==  If you believe this happened as a result of a stack
==561==  overflow in your program's main thread (unlikely but
==561==  possible), you can try to increase the size of the
==561==  main thread stack using the --main-stacksize= flag.
==561==  The main thread stack size used in this run was 8388608.
==561== 
==561== HEAP SUMMARY:
==561==     in use at exit: 2,160 bytes in 87 blocks
==561==   total heap usage: 166 allocs, 79 frees, 12,264 bytes allocated
==561== 
==561== LEAK SUMMARY:
==561==    definitely lost: 728 bytes in 18 blocks
==561==    indirectly lost: 200 bytes in 25 blocks
==561==      possibly lost: 0 bytes in 0 blocks
==561==    still reachable: 1,232 bytes in 44 blocks
==561==         suppressed: 0 bytes in 0 blocks
==561== Rerun with --leak-check=full to see details of leaked memory
==561== 
==561== For counts of detected and suppressed errors, rerun with: -v
==561== ERROR SUMMARY: 74 errors from 7 contexts (suppressed: 0 from 0)
Running a simulation with 30000 draws for 2 hands...
Valgrind reported errors:
==566== Memcheck, a memory error detector
==566== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==566== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==566== Command: ./poker inp.txt 30000
==566== Parent PID: 565
==566== 
==566== Invalid write of size 8
==566==    at 0x4014FC: make_deck_exclude (deck.c:108)
==566==    by 0x401676: build_remaining_deck (deck.c:156)
==566==    by 0x400ACC: main (main.c:59)
==566==  Address 0x5207b50 is 0 bytes after a block of size 304 alloc'd
==566==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==566==    by 0x401422: make_deck_exclude (deck.c:99)
==566==    by 0x401676: build_remaining_deck (deck.c:156)
==566==    by 0x400ACC: main (main.c:59)
==566== 
==566== Invalid write of size 8
==566==    at 0x401517: make_deck_exclude (deck.c:110)
==566==    by 0x401676: build_remaining_deck (deck.c:156)
==566==    by 0x400ACC: main (main.c:59)
==566==  Address 0x5207d10 is 0 bytes after a block of size 304 alloc'd
==566==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==566==    by 0x401443: make_deck_exclude (deck.c:102)
==566==    by 0x401676: build_remaining_deck (deck.c:156)
==566==    by 0x400ACC: main (main.c:59)
==566== 
==566== 
==566== HEAP SUMMARY:
==566==     in use at exit: 472 bytes in 9 blocks
==566==   total heap usage: 60,114 allocs, 60,105 frees, 1,691,176 bytes allocated
==566== 
==566== LEAK SUMMARY:
==566==    definitely lost: 472 bytes in 9 blocks
==566==    indirectly lost: 0 bytes in 0 blocks
==566==      possibly lost: 0 bytes in 0 blocks
==566==    still reachable: 0 bytes in 0 blocks
==566==         suppressed: 0 bytes in 0 blocks
==566== Rerun with --leak-check=full to see details of leaked memory
==566== 
==566== For counts of detected and suppressed errors, rerun with: -v
==566== ERROR SUMMARY: 14 errors from 2 contexts (suppressed: 0 from 0)
 - Next, few Seven Card Stud hands
Running a simulation with 30000 draws for 2 hands...
Valgrind reported errors:
==571== Memcheck, a memory error detector
==571== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==571== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==571== Command: ./poker inp.txt 30000
==571== Parent PID: 570
==571== 
==571== Invalid write of size 8
==571==    at 0x4014FC: make_deck_exclude (deck.c:108)
==571==    by 0x401676: build_remaining_deck (deck.c:156)
==571==    by 0x400ACC: main (main.c:59)
==571==  Address 0x5208160 is 0 bytes after a block of size 304 alloc'd
==571==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==571==    by 0x401422: make_deck_exclude (deck.c:99)
==571==    by 0x401676: build_remaining_deck (deck.c:156)
==571==    by 0x400ACC: main (main.c:59)
==571== 
==571== Invalid write of size 8
==571==    at 0x401517: make_deck_exclude (deck.c:110)
==571==    by 0x401676: build_remaining_deck (deck.c:156)
==571==    by 0x400ACC: main (main.c:59)
==571==  Address 0x5208320 is 0 bytes after a block of size 304 alloc'd
==571==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==571==    by 0x401443: make_deck_exclude (deck.c:102)
==571==    by 0x401676: build_remaining_deck (deck.c:156)
==571==    by 0x400ACC: main (main.c:59)
==571== 
==571== 
==571== HEAP SUMMARY:
==571==     in use at exit: 480 bytes in 10 blocks
==571==   total heap usage: 60,093 allocs, 60,083 frees, 1,690,728 bytes allocated
==571== 
==571== LEAK SUMMARY:
==571==    definitely lost: 480 bytes in 10 blocks
==571==    indirectly lost: 0 bytes in 0 blocks
==571==      possibly lost: 0 bytes in 0 blocks
==571==    still reachable: 0 bytes in 0 blocks
==571==         suppressed: 0 bytes in 0 blocks
==571== Rerun with --leak-check=full to see details of leaked memory
==571== 
==571== For counts of detected and suppressed errors, rerun with: -v
==571== ERROR SUMMARY: 16 errors from 2 contexts (suppressed: 0 from 0)
Running a simulation with 40000 draws for 3 hands...
Valgrind reported errors:
==576== Memcheck, a memory error detector
==576== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==576== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==576== Command: ./poker inp2.txt 40000
==576== Parent PID: 575
==576== 
==576== Invalid write of size 8
==576==    at 0x4014FC: make_deck_exclude (deck.c:108)
==576==    by 0x401676: build_remaining_deck (deck.c:156)
==576==    by 0x400ACC: main (main.c:59)
==576==  Address 0x5208ba8 is 0 bytes after a block of size 248 alloc'd
==576==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==576==    by 0x401422: make_deck_exclude (deck.c:99)
==576==    by 0x401676: build_remaining_deck (deck.c:156)
==576==    by 0x400ACC: main (main.c:59)
==576== 
==576== Invalid write of size 8
==576==    at 0x401517: make_deck_exclude (deck.c:110)
==576==    by 0x401676: build_remaining_deck (deck.c:156)
==576==    by 0x400ACC: main (main.c:59)
==576==  Address 0x5208d38 is 0 bytes after a block of size 248 alloc'd
==576==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==576==    by 0x401443: make_deck_exclude (deck.c:102)
==576==    by 0x401676: build_remaining_deck (deck.c:156)
==576==    by 0x400ACC: main (main.c:59)
==576== 
==576== 
==576== HEAP SUMMARY:
==576==     in use at exit: 488 bytes in 11 blocks
==576==   total heap usage: 239,614 allocs, 239,603 frees, 6,717,330 bytes allocated
==576== 
==576== LEAK SUMMARY:
==576==    definitely lost: 488 bytes in 11 blocks
==576==    indirectly lost: 0 bytes in 0 blocks
==576==      possibly lost: 0 bytes in 0 blocks
==576==    still reachable: 0 bytes in 0 blocks
==576==         suppressed: 0 bytes in 0 blocks
==576== Rerun with --leak-check=full to see details of leaked memory
==576== 
==576== For counts of detected and suppressed errors, rerun with: -v
==576== ERROR SUMMARY: 18 errors from 2 contexts (suppressed: 0 from 0)
 - Then one from a completely made up poker variant
Running a simulation with 100000 draws for 6 hands...
Valgrind reported errors:
==581== Memcheck, a memory error detector
==581== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==581== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==581== Command: ./poker whacky.txt 100000
==581== Parent PID: 580
==581== 
==581== Invalid write of size 8
==581==    at 0x4014FC: make_deck_exclude (deck.c:108)
==581==    by 0x401676: build_remaining_deck (deck.c:156)
==581==    by 0x400ACC: main (main.c:59)
==581==  Address 0x520a9d0 is 0 bytes after a block of size 80 alloc'd
==581==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==581==    by 0x401422: make_deck_exclude (deck.c:99)
==581==    by 0x401676: build_remaining_deck (deck.c:156)
==581==    by 0x400ACC: main (main.c:59)
==581== 
==581== Invalid write of size 8
==581==    at 0x401517: make_deck_exclude (deck.c:110)
==581==    by 0x401676: build_remaining_deck (deck.c:156)
==581==    by 0x400ACC: main (main.c:59)
==581==  Address 0x520aab0 is 0 bytes after a block of size 80 alloc'd
==581==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==581==    by 0x401443: make_deck_exclude (deck.c:102)
==581==    by 0x401676: build_remaining_deck (deck.c:156)
==581==    by 0x400ACC: main (main.c:59)
==581== 
==581== Invalid read of size 8
==581==    at 0x40120F: shuffle (deck.c:36)
==581==    by 0x400B24: main (main.c:67)
==581==  Address 0x520b0a8 is 16 bytes after a block of size 8 alloc'd
==581==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==581==    by 0x4014E8: make_deck_exclude (deck.c:108)
==581==    by 0x401676: build_remaining_deck (deck.c:156)
==581==    by 0x400ACC: main (main.c:59)
==581== 
==581== Invalid write of size 8
==581==    at 0x40121B: shuffle (deck.c:37)
==581==    by 0x400B24: main (main.c:67)
==581==  Address 0x520b0a8 is 16 bytes after a block of size 8 alloc'd
==581==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==581==    by 0x4014E8: make_deck_exclude (deck.c:108)
==581==    by 0x401676: build_remaining_deck (deck.c:156)
==581==    by 0x400ACC: main (main.c:59)
==581== 
==581== Invalid read of size 8
==581==    at 0x4011FA: shuffle (deck.c:35)
==581==    by 0x400B24: main (main.c:67)
==581==  Address 0x520b098 is 0 bytes after a block of size 8 alloc'd
==581==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==581==    by 0x4014E8: make_deck_exclude (deck.c:108)
==581==    by 0x401676: build_remaining_deck (deck.c:156)
==581==    by 0x400ACC: main (main.c:59)
==581== 
==581== Invalid write of size 8
==581==    at 0x401212: shuffle (deck.c:36)
==581==    by 0x400B24: main (main.c:67)
==581==  Address 0x520b098 is 0 bytes after a block of size 8 alloc'd
==581==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==581==    by 0x4014E8: make_deck_exclude (deck.c:108)
==581==    by 0x401676: build_remaining_deck (deck.c:156)
==581==    by 0x400ACC: main (main.c:59)
==581== 
==581== Invalid read of size 4
==581==    at 0x40369C: future_cards_from_deck (future.c:51)
==581==    by 0x400B30: main (main.c:69)
==581==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==581== 
==581== 
==581== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==581==  Access not within mapped region at address 0x0
==581==    at 0x40369C: future_cards_from_deck (future.c:51)
==581==    by 0x400B30: main (main.c:69)
==581==  If you believe this happened as a result of a stack
==581==  overflow in your program's main thread (unlikely but
==581==  possible), you can try to increase the size of the
==581==  main thread stack using the --main-stacksize= flag.
==581==  The main thread stack size used in this run was 8388608.
==581== 
==581== HEAP SUMMARY:
==581==     in use at exit: 2,392 bytes in 100 blocks
==581==   total heap usage: 229 allocs, 129 frees, 13,660 bytes allocated
==581== 
==581== LEAK SUMMARY:
==581==    definitely lost: 632 bytes in 20 blocks
==581==    indirectly lost: 112 bytes in 14 blocks
==581==      possibly lost: 0 bytes in 0 blocks
==581==    still reachable: 1,648 bytes in 66 blocks
==581==         suppressed: 0 bytes in 0 blocks
==581== Rerun with --leak-check=full to see details of leaked memory
==581== 
==581== For counts of detected and suppressed errors, rerun with: -v
==581== ERROR SUMMARY: 55 errors from 7 contexts (suppressed: 0 from 0)

Overall Grade: F
